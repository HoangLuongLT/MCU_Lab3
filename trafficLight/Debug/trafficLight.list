
trafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b00  08002b00  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b00  08002b00  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b00  08002b00  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000002c  08002b34  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002b34  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094fc  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa1  00000000  00000000  00029551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169cd  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3eb  00000000  00000000  00042d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082233  00000000  00000000  0004e168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d039b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002918  00000000  00000000  000d03f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002abc 	.word	0x08002abc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002abc 	.word	0x08002abc

0800014c <fsm_mode_processing>:

int wait_50ms[3]={1,1,1};

int increase = 0;

void fsm_mode_processing(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(mode){
 8000150:	4baf      	ldr	r3, [pc, #700]	; (8000410 <fsm_mode_processing+0x2c4>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b06      	cmp	r3, #6
 8000156:	f200 84ef 	bhi.w	8000b38 <fsm_mode_processing+0x9ec>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_mode_processing+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800017d 	.word	0x0800017d
 8000164:	080002cd 	.word	0x080002cd
 8000168:	08000431 	.word	0x08000431
 800016c:	0800058b 	.word	0x0800058b
 8000170:	08000709 	.word	0x08000709
 8000174:	08000859 	.word	0x08000859
 8000178:	080009cd 	.word	0x080009cd
	case AUTO_RED_GREEN:
		if(timer0_flag==1){
 800017c:	4ba5      	ldr	r3, [pc, #660]	; (8000414 <fsm_mode_processing+0x2c8>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b01      	cmp	r3, #1
 8000182:	f040 8087 	bne.w	8000294 <fsm_mode_processing+0x148>
			setTimer0(250);
 8000186:	20fa      	movs	r0, #250	; 0xfa
 8000188:	f000 ffe8 	bl	800115c <setTimer0>
			switch (change) {
 800018c:	4ba2      	ldr	r3, [pc, #648]	; (8000418 <fsm_mode_processing+0x2cc>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b03      	cmp	r3, #3
 8000192:	f200 8081 	bhi.w	8000298 <fsm_mode_processing+0x14c>
 8000196:	a201      	add	r2, pc, #4	; (adr r2, 800019c <fsm_mode_processing+0x50>)
 8000198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001e7 	.word	0x080001e7
 80001a4:	0800021d 	.word	0x0800021d
 80001a8:	08000247 	.word	0x08000247
				case 0:
					display7SEG(0,(int)(redDuration-cnt)/10);
 80001ac:	4b9b      	ldr	r3, [pc, #620]	; (800041c <fsm_mode_processing+0x2d0>)
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	4b9b      	ldr	r3, [pc, #620]	; (8000420 <fsm_mode_processing+0x2d4>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	1ad3      	subs	r3, r2, r3
 80001b6:	4a9b      	ldr	r2, [pc, #620]	; (8000424 <fsm_mode_processing+0x2d8>)
 80001b8:	fb82 1203 	smull	r1, r2, r2, r3
 80001bc:	1092      	asrs	r2, r2, #2
 80001be:	17db      	asrs	r3, r3, #31
 80001c0:	1ad3      	subs	r3, r2, r3
 80001c2:	4619      	mov	r1, r3
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fefd 	bl	8000fc4 <display7SEG>
					change++;
 80001ca:	4b93      	ldr	r3, [pc, #588]	; (8000418 <fsm_mode_processing+0x2cc>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3301      	adds	r3, #1
 80001d0:	4a91      	ldr	r2, [pc, #580]	; (8000418 <fsm_mode_processing+0x2cc>)
 80001d2:	6013      	str	r3, [r2, #0]

					turnOffAll();
 80001d4:	f000 ff62 	bl	800109c <turnOffAll>
					turnOnOnlyRed(0);//ROAD 0
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 ff75 	bl	80010c8 <turnOnOnlyRed>
					turnOnOnlyGreen(1);//ROAD 1
 80001de:	2001      	movs	r0, #1
 80001e0:	f000 ffa4 	bl	800112c <turnOnOnlyGreen>

					break;
 80001e4:	e05b      	b.n	800029e <fsm_mode_processing+0x152>
				case 1:
					display7SEG(1,(redDuration-cnt)%10);
 80001e6:	4b8d      	ldr	r3, [pc, #564]	; (800041c <fsm_mode_processing+0x2d0>)
 80001e8:	681a      	ldr	r2, [r3, #0]
 80001ea:	4b8d      	ldr	r3, [pc, #564]	; (8000420 <fsm_mode_processing+0x2d4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	1ad2      	subs	r2, r2, r3
 80001f0:	4b8c      	ldr	r3, [pc, #560]	; (8000424 <fsm_mode_processing+0x2d8>)
 80001f2:	fb83 1302 	smull	r1, r3, r3, r2
 80001f6:	1099      	asrs	r1, r3, #2
 80001f8:	17d3      	asrs	r3, r2, #31
 80001fa:	1ac9      	subs	r1, r1, r3
 80001fc:	460b      	mov	r3, r1
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	440b      	add	r3, r1
 8000202:	005b      	lsls	r3, r3, #1
 8000204:	1ad1      	subs	r1, r2, r3
 8000206:	460b      	mov	r3, r1
 8000208:	4619      	mov	r1, r3
 800020a:	2001      	movs	r0, #1
 800020c:	f000 feda 	bl	8000fc4 <display7SEG>
					change++;
 8000210:	4b81      	ldr	r3, [pc, #516]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	4a80      	ldr	r2, [pc, #512]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000218:	6013      	str	r3, [r2, #0]
					break;
 800021a:	e040      	b.n	800029e <fsm_mode_processing+0x152>
				case 2:
					display7SEG(2,(greenDuration-cnt)/10);
 800021c:	4b82      	ldr	r3, [pc, #520]	; (8000428 <fsm_mode_processing+0x2dc>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b7f      	ldr	r3, [pc, #508]	; (8000420 <fsm_mode_processing+0x2d4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	4a7f      	ldr	r2, [pc, #508]	; (8000424 <fsm_mode_processing+0x2d8>)
 8000228:	fb82 1203 	smull	r1, r2, r2, r3
 800022c:	1092      	asrs	r2, r2, #2
 800022e:	17db      	asrs	r3, r3, #31
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	4619      	mov	r1, r3
 8000234:	2002      	movs	r0, #2
 8000236:	f000 fec5 	bl	8000fc4 <display7SEG>
					change++;
 800023a:	4b77      	ldr	r3, [pc, #476]	; (8000418 <fsm_mode_processing+0x2cc>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	3301      	adds	r3, #1
 8000240:	4a75      	ldr	r2, [pc, #468]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000242:	6013      	str	r3, [r2, #0]
					break;
 8000244:	e02b      	b.n	800029e <fsm_mode_processing+0x152>
				case 3:
					display7SEG(3,(greenDuration-cnt)%10);
 8000246:	4b78      	ldr	r3, [pc, #480]	; (8000428 <fsm_mode_processing+0x2dc>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b75      	ldr	r3, [pc, #468]	; (8000420 <fsm_mode_processing+0x2d4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	1ad2      	subs	r2, r2, r3
 8000250:	4b74      	ldr	r3, [pc, #464]	; (8000424 <fsm_mode_processing+0x2d8>)
 8000252:	fb83 1302 	smull	r1, r3, r3, r2
 8000256:	1099      	asrs	r1, r3, #2
 8000258:	17d3      	asrs	r3, r2, #31
 800025a:	1ac9      	subs	r1, r1, r3
 800025c:	460b      	mov	r3, r1
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	440b      	add	r3, r1
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	1ad1      	subs	r1, r2, r3
 8000266:	460b      	mov	r3, r1
 8000268:	4619      	mov	r1, r3
 800026a:	2003      	movs	r0, #3
 800026c:	f000 feaa 	bl	8000fc4 <display7SEG>
					change=0;
 8000270:	4b69      	ldr	r3, [pc, #420]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]

					cnt++;
 8000276:	4b6a      	ldr	r3, [pc, #424]	; (8000420 <fsm_mode_processing+0x2d4>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	3301      	adds	r3, #1
 800027c:	4a68      	ldr	r2, [pc, #416]	; (8000420 <fsm_mode_processing+0x2d4>)
 800027e:	6013      	str	r3, [r2, #0]

					if(cnt==greenDuration){
 8000280:	4b67      	ldr	r3, [pc, #412]	; (8000420 <fsm_mode_processing+0x2d4>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b68      	ldr	r3, [pc, #416]	; (8000428 <fsm_mode_processing+0x2dc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d107      	bne.n	800029c <fsm_mode_processing+0x150>
						mode=AUTO_RED_YELLOW;
 800028c:	4b60      	ldr	r3, [pc, #384]	; (8000410 <fsm_mode_processing+0x2c4>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
					}
					break;
 8000292:	e003      	b.n	800029c <fsm_mode_processing+0x150>
				default:
					break;
			}
		}
 8000294:	bf00      	nop
 8000296:	e002      	b.n	800029e <fsm_mode_processing+0x152>
					break;
 8000298:	bf00      	nop
 800029a:	e000      	b.n	800029e <fsm_mode_processing+0x152>
					break;
 800029c:	bf00      	nop
		if(is_button_pressed(0)&&timer1_flag==1){
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 fcde 	bl	8000c60 <is_button_pressed>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f000 8439 	beq.w	8000b1e <fsm_mode_processing+0x9d2>
 80002ac:	4b5f      	ldr	r3, [pc, #380]	; (800042c <fsm_mode_processing+0x2e0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	f040 8434 	bne.w	8000b1e <fsm_mode_processing+0x9d2>
			mode=MODIFY_RED;
 80002b6:	4b56      	ldr	r3, [pc, #344]	; (8000410 <fsm_mode_processing+0x2c4>)
 80002b8:	2204      	movs	r2, #4
 80002ba:	701a      	strb	r2, [r3, #0]
			timer0_flag=1;
 80002bc:	4b55      	ldr	r3, [pc, #340]	; (8000414 <fsm_mode_processing+0x2c8>)
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
			setTimer1(200);
 80002c2:	20c8      	movs	r0, #200	; 0xc8
 80002c4:	f000 ff7e 	bl	80011c4 <setTimer1>
		}
		break;
 80002c8:	f000 bc29 	b.w	8000b1e <fsm_mode_processing+0x9d2>
	case AUTO_RED_YELLOW:
		if(timer0_flag==1){
 80002cc:	4b51      	ldr	r3, [pc, #324]	; (8000414 <fsm_mode_processing+0x2c8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	f040 8087 	bne.w	80003e4 <fsm_mode_processing+0x298>
			setTimer0(250);
 80002d6:	20fa      	movs	r0, #250	; 0xfa
 80002d8:	f000 ff40 	bl	800115c <setTimer0>
			switch (change) {
 80002dc:	4b4e      	ldr	r3, [pc, #312]	; (8000418 <fsm_mode_processing+0x2cc>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	f200 8081 	bhi.w	80003e8 <fsm_mode_processing+0x29c>
 80002e6:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <fsm_mode_processing+0x1a0>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	080002fd 	.word	0x080002fd
 80002f0:	08000337 	.word	0x08000337
 80002f4:	0800036d 	.word	0x0800036d
 80002f8:	08000397 	.word	0x08000397
				case 0:
					display7SEG(0,(redDuration-cnt)/10);
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <fsm_mode_processing+0x2d0>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b47      	ldr	r3, [pc, #284]	; (8000420 <fsm_mode_processing+0x2d4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	4a47      	ldr	r2, [pc, #284]	; (8000424 <fsm_mode_processing+0x2d8>)
 8000308:	fb82 1203 	smull	r1, r2, r2, r3
 800030c:	1092      	asrs	r2, r2, #2
 800030e:	17db      	asrs	r3, r3, #31
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	4619      	mov	r1, r3
 8000314:	2000      	movs	r0, #0
 8000316:	f000 fe55 	bl	8000fc4 <display7SEG>
					change++;
 800031a:	4b3f      	ldr	r3, [pc, #252]	; (8000418 <fsm_mode_processing+0x2cc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	4a3d      	ldr	r2, [pc, #244]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000322:	6013      	str	r3, [r2, #0]

					turnOffAll();
 8000324:	f000 feba 	bl	800109c <turnOffAll>
					turnOnOnlyRed(0);
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fecd 	bl	80010c8 <turnOnOnlyRed>
					turnOnOnlyYellow(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f000 fee2 	bl	80010f8 <turnOnOnlyYellow>

					break;
 8000334:	e05b      	b.n	80003ee <fsm_mode_processing+0x2a2>
				case 1:
					display7SEG(1,(redDuration-cnt)%10);
 8000336:	4b39      	ldr	r3, [pc, #228]	; (800041c <fsm_mode_processing+0x2d0>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b39      	ldr	r3, [pc, #228]	; (8000420 <fsm_mode_processing+0x2d4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	1ad2      	subs	r2, r2, r3
 8000340:	4b38      	ldr	r3, [pc, #224]	; (8000424 <fsm_mode_processing+0x2d8>)
 8000342:	fb83 1302 	smull	r1, r3, r3, r2
 8000346:	1099      	asrs	r1, r3, #2
 8000348:	17d3      	asrs	r3, r2, #31
 800034a:	1ac9      	subs	r1, r1, r3
 800034c:	460b      	mov	r3, r1
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	1ad1      	subs	r1, r2, r3
 8000356:	460b      	mov	r3, r1
 8000358:	4619      	mov	r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	f000 fe32 	bl	8000fc4 <display7SEG>
					change++;
 8000360:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a2c      	ldr	r2, [pc, #176]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000368:	6013      	str	r3, [r2, #0]
					break;
 800036a:	e040      	b.n	80003ee <fsm_mode_processing+0x2a2>
				case 2:
					display7SEG(2,(redDuration-cnt)/10);
 800036c:	4b2b      	ldr	r3, [pc, #172]	; (800041c <fsm_mode_processing+0x2d0>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <fsm_mode_processing+0x2d4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a2b      	ldr	r2, [pc, #172]	; (8000424 <fsm_mode_processing+0x2d8>)
 8000378:	fb82 1203 	smull	r1, r2, r2, r3
 800037c:	1092      	asrs	r2, r2, #2
 800037e:	17db      	asrs	r3, r3, #31
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	4619      	mov	r1, r3
 8000384:	2002      	movs	r0, #2
 8000386:	f000 fe1d 	bl	8000fc4 <display7SEG>
					change++;
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <fsm_mode_processing+0x2cc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a21      	ldr	r2, [pc, #132]	; (8000418 <fsm_mode_processing+0x2cc>)
 8000392:	6013      	str	r3, [r2, #0]
					break;
 8000394:	e02b      	b.n	80003ee <fsm_mode_processing+0x2a2>
				case 3:
					display7SEG(3,(redDuration-cnt)%10);
 8000396:	4b21      	ldr	r3, [pc, #132]	; (800041c <fsm_mode_processing+0x2d0>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <fsm_mode_processing+0x2d4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	1ad2      	subs	r2, r2, r3
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_mode_processing+0x2d8>)
 80003a2:	fb83 1302 	smull	r1, r3, r3, r2
 80003a6:	1099      	asrs	r1, r3, #2
 80003a8:	17d3      	asrs	r3, r2, #31
 80003aa:	1ac9      	subs	r1, r1, r3
 80003ac:	460b      	mov	r3, r1
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	440b      	add	r3, r1
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	1ad1      	subs	r1, r2, r3
 80003b6:	460b      	mov	r3, r1
 80003b8:	4619      	mov	r1, r3
 80003ba:	2003      	movs	r0, #3
 80003bc:	f000 fe02 	bl	8000fc4 <display7SEG>
					change=0;
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <fsm_mode_processing+0x2cc>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]

					cnt++;
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <fsm_mode_processing+0x2d4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	3301      	adds	r3, #1
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <fsm_mode_processing+0x2d4>)
 80003ce:	6013      	str	r3, [r2, #0]
					if(cnt==redDuration){
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <fsm_mode_processing+0x2d4>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <fsm_mode_processing+0x2d0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d107      	bne.n	80003ec <fsm_mode_processing+0x2a0>
						mode=AUTO_GREEN_RED;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <fsm_mode_processing+0x2c4>)
 80003de:	2202      	movs	r2, #2
 80003e0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80003e2:	e003      	b.n	80003ec <fsm_mode_processing+0x2a0>
				default:
					break;
			}
		}
 80003e4:	bf00      	nop
 80003e6:	e002      	b.n	80003ee <fsm_mode_processing+0x2a2>
					break;
 80003e8:	bf00      	nop
 80003ea:	e000      	b.n	80003ee <fsm_mode_processing+0x2a2>
					break;
 80003ec:	bf00      	nop
		if(is_button_pressed(0)){
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 fc36 	bl	8000c60 <is_button_pressed>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	f000 8393 	beq.w	8000b22 <fsm_mode_processing+0x9d6>
			mode=MODIFY_RED;
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <fsm_mode_processing+0x2c4>)
 80003fe:	2204      	movs	r2, #4
 8000400:	701a      	strb	r2, [r3, #0]
			timer0_flag=1;
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <fsm_mode_processing+0x2c8>)
 8000404:	2201      	movs	r2, #1
 8000406:	601a      	str	r2, [r3, #0]
			setTimer1(200);
 8000408:	20c8      	movs	r0, #200	; 0xc8
 800040a:	f000 fedb 	bl	80011c4 <setTimer1>
		}
		break;
 800040e:	e388      	b.n	8000b22 <fsm_mode_processing+0x9d6>
 8000410:	20000048 	.word	0x20000048
 8000414:	2000006c 	.word	0x2000006c
 8000418:	20000050 	.word	0x20000050
 800041c:	20000000 	.word	0x20000000
 8000420:	2000004c 	.word	0x2000004c
 8000424:	66666667 	.word	0x66666667
 8000428:	20000004 	.word	0x20000004
 800042c:	20000074 	.word	0x20000074
	case AUTO_GREEN_RED:
		if(timer0_flag==1){
 8000430:	4bad      	ldr	r3, [pc, #692]	; (80006e8 <fsm_mode_processing+0x59c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	f040 8092 	bne.w	800055e <fsm_mode_processing+0x412>
			setTimer0(250);
 800043a:	20fa      	movs	r0, #250	; 0xfa
 800043c:	f000 fe8e 	bl	800115c <setTimer0>
			switch (change) {
 8000440:	4baa      	ldr	r3, [pc, #680]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b03      	cmp	r3, #3
 8000446:	f200 808c 	bhi.w	8000562 <fsm_mode_processing+0x416>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_processing+0x304>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000461 	.word	0x08000461
 8000454:	080004a1 	.word	0x080004a1
 8000458:	080004dd 	.word	0x080004dd
 800045c:	08000509 	.word	0x08000509
				case 0:
					display7SEG(0,(int)(redDuration+greenDuration-cnt)/10);
 8000460:	4ba3      	ldr	r3, [pc, #652]	; (80006f0 <fsm_mode_processing+0x5a4>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4ba3      	ldr	r3, [pc, #652]	; (80006f4 <fsm_mode_processing+0x5a8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	441a      	add	r2, r3
 800046a:	4ba3      	ldr	r3, [pc, #652]	; (80006f8 <fsm_mode_processing+0x5ac>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4aa2      	ldr	r2, [pc, #648]	; (80006fc <fsm_mode_processing+0x5b0>)
 8000472:	fb82 1203 	smull	r1, r2, r2, r3
 8000476:	1092      	asrs	r2, r2, #2
 8000478:	17db      	asrs	r3, r3, #31
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	4619      	mov	r1, r3
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fda0 	bl	8000fc4 <display7SEG>
					change++;
 8000484:	4b99      	ldr	r3, [pc, #612]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	4a98      	ldr	r2, [pc, #608]	; (80006ec <fsm_mode_processing+0x5a0>)
 800048c:	6013      	str	r3, [r2, #0]

					turnOffAll();
 800048e:	f000 fe05 	bl	800109c <turnOffAll>
					turnOnOnlyGreen(0);
 8000492:	2000      	movs	r0, #0
 8000494:	f000 fe4a 	bl	800112c <turnOnOnlyGreen>
					turnOnOnlyRed(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fe15 	bl	80010c8 <turnOnOnlyRed>

					break;
 800049e:	e063      	b.n	8000568 <fsm_mode_processing+0x41c>
				case 1:
					display7SEG(1,(redDuration+greenDuration-cnt)%10);
 80004a0:	4b93      	ldr	r3, [pc, #588]	; (80006f0 <fsm_mode_processing+0x5a4>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b93      	ldr	r3, [pc, #588]	; (80006f4 <fsm_mode_processing+0x5a8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	441a      	add	r2, r3
 80004aa:	4b93      	ldr	r3, [pc, #588]	; (80006f8 <fsm_mode_processing+0x5ac>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	1ad2      	subs	r2, r2, r3
 80004b0:	4b92      	ldr	r3, [pc, #584]	; (80006fc <fsm_mode_processing+0x5b0>)
 80004b2:	fb83 1302 	smull	r1, r3, r3, r2
 80004b6:	1099      	asrs	r1, r3, #2
 80004b8:	17d3      	asrs	r3, r2, #31
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	460b      	mov	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	440b      	add	r3, r1
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	1ad1      	subs	r1, r2, r3
 80004c6:	460b      	mov	r3, r1
 80004c8:	4619      	mov	r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	f000 fd7a 	bl	8000fc4 <display7SEG>
					change++;
 80004d0:	4b86      	ldr	r3, [pc, #536]	; (80006ec <fsm_mode_processing+0x5a0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	4a85      	ldr	r2, [pc, #532]	; (80006ec <fsm_mode_processing+0x5a0>)
 80004d8:	6013      	str	r3, [r2, #0]
					break;
 80004da:	e045      	b.n	8000568 <fsm_mode_processing+0x41c>
				case 2:
					display7SEG(2,(int)(2*redDuration-cnt)/10);
 80004dc:	4b84      	ldr	r3, [pc, #528]	; (80006f0 <fsm_mode_processing+0x5a4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	005a      	lsls	r2, r3, #1
 80004e2:	4b85      	ldr	r3, [pc, #532]	; (80006f8 <fsm_mode_processing+0x5ac>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	4a84      	ldr	r2, [pc, #528]	; (80006fc <fsm_mode_processing+0x5b0>)
 80004ea:	fb82 1203 	smull	r1, r2, r2, r3
 80004ee:	1092      	asrs	r2, r2, #2
 80004f0:	17db      	asrs	r3, r3, #31
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 fd64 	bl	8000fc4 <display7SEG>
					change++;
 80004fc:	4b7b      	ldr	r3, [pc, #492]	; (80006ec <fsm_mode_processing+0x5a0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a7a      	ldr	r2, [pc, #488]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000504:	6013      	str	r3, [r2, #0]
					break;
 8000506:	e02f      	b.n	8000568 <fsm_mode_processing+0x41c>
				case 3:
					display7SEG(3,(2*redDuration-cnt)%10);
 8000508:	4b79      	ldr	r3, [pc, #484]	; (80006f0 <fsm_mode_processing+0x5a4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	005a      	lsls	r2, r3, #1
 800050e:	4b7a      	ldr	r3, [pc, #488]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	4b79      	ldr	r3, [pc, #484]	; (80006fc <fsm_mode_processing+0x5b0>)
 8000516:	fb83 1302 	smull	r1, r3, r3, r2
 800051a:	1099      	asrs	r1, r3, #2
 800051c:	17d3      	asrs	r3, r2, #31
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	460b      	mov	r3, r1
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	440b      	add	r3, r1
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	1ad1      	subs	r1, r2, r3
 800052a:	460b      	mov	r3, r1
 800052c:	4619      	mov	r1, r3
 800052e:	2003      	movs	r0, #3
 8000530:	f000 fd48 	bl	8000fc4 <display7SEG>
					change=0;
 8000534:	4b6d      	ldr	r3, [pc, #436]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]

					cnt++;
 800053a:	4b6f      	ldr	r3, [pc, #444]	; (80006f8 <fsm_mode_processing+0x5ac>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a6d      	ldr	r2, [pc, #436]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000542:	6013      	str	r3, [r2, #0]
					if(cnt==(redDuration+greenDuration)){
 8000544:	4b6a      	ldr	r3, [pc, #424]	; (80006f0 <fsm_mode_processing+0x5a4>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b6a      	ldr	r3, [pc, #424]	; (80006f4 <fsm_mode_processing+0x5a8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	441a      	add	r2, r3
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d107      	bne.n	8000566 <fsm_mode_processing+0x41a>
						mode=AUTO_YELLOW_RED;
 8000556:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <fsm_mode_processing+0x5b4>)
 8000558:	2203      	movs	r2, #3
 800055a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800055c:	e003      	b.n	8000566 <fsm_mode_processing+0x41a>
				default:
					break;
			}
		}
 800055e:	bf00      	nop
 8000560:	e002      	b.n	8000568 <fsm_mode_processing+0x41c>
					break;
 8000562:	bf00      	nop
 8000564:	e000      	b.n	8000568 <fsm_mode_processing+0x41c>
					break;
 8000566:	bf00      	nop
		if(is_button_pressed(0)){
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fb79 	bl	8000c60 <is_button_pressed>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	f000 82d8 	beq.w	8000b26 <fsm_mode_processing+0x9da>
			mode=MODIFY_RED;
 8000576:	4b62      	ldr	r3, [pc, #392]	; (8000700 <fsm_mode_processing+0x5b4>)
 8000578:	2204      	movs	r2, #4
 800057a:	701a      	strb	r2, [r3, #0]
			timer0_flag=1;
 800057c:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <fsm_mode_processing+0x59c>)
 800057e:	2201      	movs	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
			setTimer1(200);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f000 fe1e 	bl	80011c4 <setTimer1>
		}
		break;
 8000588:	e2cd      	b.n	8000b26 <fsm_mode_processing+0x9da>
	case AUTO_YELLOW_RED:
		if(timer0_flag==1){
 800058a:	4b57      	ldr	r3, [pc, #348]	; (80006e8 <fsm_mode_processing+0x59c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	f040 8090 	bne.w	80006b4 <fsm_mode_processing+0x568>
			setTimer0(250);
 8000594:	20fa      	movs	r0, #250	; 0xfa
 8000596:	f000 fde1 	bl	800115c <setTimer0>
			switch (change) {
 800059a:	4b54      	ldr	r3, [pc, #336]	; (80006ec <fsm_mode_processing+0x5a0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	f200 808a 	bhi.w	80006b8 <fsm_mode_processing+0x56c>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <fsm_mode_processing+0x460>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005bd 	.word	0x080005bd
 80005b0:	080005f9 	.word	0x080005f9
 80005b4:	08000631 	.word	0x08000631
 80005b8:	0800065d 	.word	0x0800065d
				case 0:
					display7SEG(0,(int)(2*redDuration-cnt)/10);
 80005bc:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <fsm_mode_processing+0x5a4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	005a      	lsls	r2, r3, #1
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <fsm_mode_processing+0x5ac>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <fsm_mode_processing+0x5b0>)
 80005ca:	fb82 1203 	smull	r1, r2, r2, r3
 80005ce:	1092      	asrs	r2, r2, #2
 80005d0:	17db      	asrs	r3, r3, #31
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fcf4 	bl	8000fc4 <display7SEG>
					change++;
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <fsm_mode_processing+0x5a0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a42      	ldr	r2, [pc, #264]	; (80006ec <fsm_mode_processing+0x5a0>)
 80005e4:	6013      	str	r3, [r2, #0]

					turnOffAll();
 80005e6:	f000 fd59 	bl	800109c <turnOffAll>
					turnOnOnlyYellow(0);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fd84 	bl	80010f8 <turnOnOnlyYellow>
					turnOnOnlyRed(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 fd69 	bl	80010c8 <turnOnOnlyRed>

					break;
 80005f6:	e062      	b.n	80006be <fsm_mode_processing+0x572>
				case 1:
					display7SEG(1,(2*redDuration-cnt)%10);
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <fsm_mode_processing+0x5a4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	005a      	lsls	r2, r3, #1
 80005fe:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1ad2      	subs	r2, r2, r3
 8000604:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <fsm_mode_processing+0x5b0>)
 8000606:	fb83 1302 	smull	r1, r3, r3, r2
 800060a:	1099      	asrs	r1, r3, #2
 800060c:	17d3      	asrs	r3, r2, #31
 800060e:	1ac9      	subs	r1, r1, r3
 8000610:	460b      	mov	r3, r1
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	440b      	add	r3, r1
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	1ad1      	subs	r1, r2, r3
 800061a:	460b      	mov	r3, r1
 800061c:	4619      	mov	r1, r3
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fcd0 	bl	8000fc4 <display7SEG>
					change++;
 8000624:	4b31      	ldr	r3, [pc, #196]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <fsm_mode_processing+0x5a0>)
 800062c:	6013      	str	r3, [r2, #0]
					break;
 800062e:	e046      	b.n	80006be <fsm_mode_processing+0x572>
				case 2:
					display7SEG(2,(int)(2*redDuration-cnt)/10);
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <fsm_mode_processing+0x5a4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	005a      	lsls	r2, r3, #1
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <fsm_mode_processing+0x5b0>)
 800063e:	fb82 1203 	smull	r1, r2, r2, r3
 8000642:	1092      	asrs	r2, r2, #2
 8000644:	17db      	asrs	r3, r3, #31
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	4619      	mov	r1, r3
 800064a:	2002      	movs	r0, #2
 800064c:	f000 fcba 	bl	8000fc4 <display7SEG>
					change++;
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <fsm_mode_processing+0x5a0>)
 8000658:	6013      	str	r3, [r2, #0]
					break;
 800065a:	e030      	b.n	80006be <fsm_mode_processing+0x572>
				case 3:
					display7SEG(3,(2*redDuration-cnt)%10);
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <fsm_mode_processing+0x5a4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	005a      	lsls	r2, r3, #1
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <fsm_mode_processing+0x5b0>)
 800066a:	fb83 1302 	smull	r1, r3, r3, r2
 800066e:	1099      	asrs	r1, r3, #2
 8000670:	17d3      	asrs	r3, r2, #31
 8000672:	1ac9      	subs	r1, r1, r3
 8000674:	460b      	mov	r3, r1
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	1ad1      	subs	r1, r2, r3
 800067e:	460b      	mov	r3, r1
 8000680:	4619      	mov	r1, r3
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fc9e 	bl	8000fc4 <display7SEG>
					change=0;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <fsm_mode_processing+0x5a0>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

					cnt++;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <fsm_mode_processing+0x5ac>)
 8000696:	6013      	str	r3, [r2, #0]
					if(cnt==(2*redDuration)){
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <fsm_mode_processing+0x5a4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	005a      	lsls	r2, r3, #1
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <fsm_mode_processing+0x5ac>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d10a      	bne.n	80006bc <fsm_mode_processing+0x570>
						mode=AUTO_RED_GREEN;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <fsm_mode_processing+0x5b4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
						cnt=0;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <fsm_mode_processing+0x5ac>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
					}
					break;
 80006b2:	e003      	b.n	80006bc <fsm_mode_processing+0x570>
				default:
					break;
			}
		}
 80006b4:	bf00      	nop
 80006b6:	e002      	b.n	80006be <fsm_mode_processing+0x572>
					break;
 80006b8:	bf00      	nop
 80006ba:	e000      	b.n	80006be <fsm_mode_processing+0x572>
					break;
 80006bc:	bf00      	nop
		if(is_button_pressed(0)){
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 face 	bl	8000c60 <is_button_pressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 822f 	beq.w	8000b2a <fsm_mode_processing+0x9de>
			mode=MODIFY_RED;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <fsm_mode_processing+0x5b4>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	701a      	strb	r2, [r3, #0]
			increase=0;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <fsm_mode_processing+0x5b8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			timer0_flag=1;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <fsm_mode_processing+0x59c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
			setTimer1(200);
 80006de:	20c8      	movs	r0, #200	; 0xc8
 80006e0:	f000 fd70 	bl	80011c4 <setTimer1>
		}
		break;
 80006e4:	e221      	b.n	8000b2a <fsm_mode_processing+0x9de>
 80006e6:	bf00      	nop
 80006e8:	2000006c 	.word	0x2000006c
 80006ec:	20000050 	.word	0x20000050
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000004 	.word	0x20000004
 80006f8:	2000004c 	.word	0x2000004c
 80006fc:	66666667 	.word	0x66666667
 8000700:	20000048 	.word	0x20000048
 8000704:	20000054 	.word	0x20000054
	case MODIFY_RED:
		if(timer0_flag==1){
 8000708:	4ba7      	ldr	r3, [pc, #668]	; (80009a8 <fsm_mode_processing+0x85c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d157      	bne.n	80007c0 <fsm_mode_processing+0x674>
			setTimer0(250);
 8000710:	20fa      	movs	r0, #250	; 0xfa
 8000712:	f000 fd23 	bl	800115c <setTimer0>
			switch (change) {
 8000716:	4ba5      	ldr	r3, [pc, #660]	; (80009ac <fsm_mode_processing+0x860>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d852      	bhi.n	80007c4 <fsm_mode_processing+0x678>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <fsm_mode_processing+0x5d8>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000735 	.word	0x08000735
 8000728:	0800074d 	.word	0x0800074d
 800072c:	08000761 	.word	0x08000761
 8000730:	0800078f 	.word	0x0800078f
				case 0:
					blinkAllRedLed();
 8000734:	f000 fbc0 	bl	8000eb8 <blinkAllRedLed>
					display7SEG(0,0);
 8000738:	2100      	movs	r1, #0
 800073a:	2000      	movs	r0, #0
 800073c:	f000 fc42 	bl	8000fc4 <display7SEG>
					change++;
 8000740:	4b9a      	ldr	r3, [pc, #616]	; (80009ac <fsm_mode_processing+0x860>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	4a99      	ldr	r2, [pc, #612]	; (80009ac <fsm_mode_processing+0x860>)
 8000748:	6013      	str	r3, [r2, #0]
					break;
 800074a:	e03c      	b.n	80007c6 <fsm_mode_processing+0x67a>
				case 1:
					display7SEG(1,2);
 800074c:	2102      	movs	r1, #2
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fc38 	bl	8000fc4 <display7SEG>
					change++;
 8000754:	4b95      	ldr	r3, [pc, #596]	; (80009ac <fsm_mode_processing+0x860>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a94      	ldr	r2, [pc, #592]	; (80009ac <fsm_mode_processing+0x860>)
 800075c:	6013      	str	r3, [r2, #0]
					break;
 800075e:	e032      	b.n	80007c6 <fsm_mode_processing+0x67a>
				case 2:
					blinkAllRedLed();
 8000760:	f000 fbaa 	bl	8000eb8 <blinkAllRedLed>
					display7SEG(2,(int)((redDuration+increase)/10));
 8000764:	4b92      	ldr	r3, [pc, #584]	; (80009b0 <fsm_mode_processing+0x864>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b92      	ldr	r3, [pc, #584]	; (80009b4 <fsm_mode_processing+0x868>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4413      	add	r3, r2
 800076e:	4a92      	ldr	r2, [pc, #584]	; (80009b8 <fsm_mode_processing+0x86c>)
 8000770:	fb82 1203 	smull	r1, r2, r2, r3
 8000774:	1092      	asrs	r2, r2, #2
 8000776:	17db      	asrs	r3, r3, #31
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	4619      	mov	r1, r3
 800077c:	2002      	movs	r0, #2
 800077e:	f000 fc21 	bl	8000fc4 <display7SEG>
					change++;
 8000782:	4b8a      	ldr	r3, [pc, #552]	; (80009ac <fsm_mode_processing+0x860>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a88      	ldr	r2, [pc, #544]	; (80009ac <fsm_mode_processing+0x860>)
 800078a:	6013      	str	r3, [r2, #0]
					break;
 800078c:	e01b      	b.n	80007c6 <fsm_mode_processing+0x67a>
				case 3:
					display7SEG(3,(redDuration+increase)%10);
 800078e:	4b88      	ldr	r3, [pc, #544]	; (80009b0 <fsm_mode_processing+0x864>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b88      	ldr	r3, [pc, #544]	; (80009b4 <fsm_mode_processing+0x868>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	441a      	add	r2, r3
 8000798:	4b87      	ldr	r3, [pc, #540]	; (80009b8 <fsm_mode_processing+0x86c>)
 800079a:	fb83 1302 	smull	r1, r3, r3, r2
 800079e:	1099      	asrs	r1, r3, #2
 80007a0:	17d3      	asrs	r3, r2, #31
 80007a2:	1ac9      	subs	r1, r1, r3
 80007a4:	460b      	mov	r3, r1
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	1ad1      	subs	r1, r2, r3
 80007ae:	460b      	mov	r3, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 fc06 	bl	8000fc4 <display7SEG>
					change=0;
 80007b8:	4b7c      	ldr	r3, [pc, #496]	; (80009ac <fsm_mode_processing+0x860>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
					break;
 80007be:	e002      	b.n	80007c6 <fsm_mode_processing+0x67a>
				default:
					break;
			}
		}
 80007c0:	bf00      	nop
 80007c2:	e000      	b.n	80007c6 <fsm_mode_processing+0x67a>
					break;
 80007c4:	bf00      	nop
		if(is_button_pressed(0)&&timer1_flag){
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fa4a 	bl	8000c60 <is_button_pressed>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00f      	beq.n	80007f2 <fsm_mode_processing+0x6a6>
 80007d2:	4b7a      	ldr	r3, [pc, #488]	; (80009bc <fsm_mode_processing+0x870>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00b      	beq.n	80007f2 <fsm_mode_processing+0x6a6>
			mode=MODIFY_YELLOW;
 80007da:	4b79      	ldr	r3, [pc, #484]	; (80009c0 <fsm_mode_processing+0x874>)
 80007dc:	2205      	movs	r2, #5
 80007de:	701a      	strb	r2, [r3, #0]
			increase=0;
 80007e0:	4b74      	ldr	r3, [pc, #464]	; (80009b4 <fsm_mode_processing+0x868>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
			setTimer1(200);
 80007e6:	20c8      	movs	r0, #200	; 0xc8
 80007e8:	f000 fcec 	bl	80011c4 <setTimer1>
			timer0_flag=1;
 80007ec:	4b6e      	ldr	r3, [pc, #440]	; (80009a8 <fsm_mode_processing+0x85c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1)&&timer2_flag){
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fa34 	bl	8000c60 <is_button_pressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d012      	beq.n	8000824 <fsm_mode_processing+0x6d8>
 80007fe:	4b71      	ldr	r3, [pc, #452]	; (80009c4 <fsm_mode_processing+0x878>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00e      	beq.n	8000824 <fsm_mode_processing+0x6d8>
			setTimer2(200);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f000 fd10 	bl	800122c <setTimer2>
			if((increase+redDuration)<99)increase++;
 800080c:	4b69      	ldr	r3, [pc, #420]	; (80009b4 <fsm_mode_processing+0x868>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b67      	ldr	r3, [pc, #412]	; (80009b0 <fsm_mode_processing+0x864>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4413      	add	r3, r2
 8000816:	2b62      	cmp	r3, #98	; 0x62
 8000818:	dc04      	bgt.n	8000824 <fsm_mode_processing+0x6d8>
 800081a:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <fsm_mode_processing+0x868>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	4a64      	ldr	r2, [pc, #400]	; (80009b4 <fsm_mode_processing+0x868>)
 8000822:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(2)&&timer2_flag){
 8000824:	2002      	movs	r0, #2
 8000826:	f000 fa1b 	bl	8000c60 <is_button_pressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	f000 817e 	beq.w	8000b2e <fsm_mode_processing+0x9e2>
 8000832:	4b64      	ldr	r3, [pc, #400]	; (80009c4 <fsm_mode_processing+0x878>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	f000 8179 	beq.w	8000b2e <fsm_mode_processing+0x9e2>
			setTimer2(200);
 800083c:	20c8      	movs	r0, #200	; 0xc8
 800083e:	f000 fcf5 	bl	800122c <setTimer2>
			redDuration+=increase;
 8000842:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <fsm_mode_processing+0x864>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <fsm_mode_processing+0x868>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a58      	ldr	r2, [pc, #352]	; (80009b0 <fsm_mode_processing+0x864>)
 800084e:	6013      	str	r3, [r2, #0]
			increase=0;
 8000850:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <fsm_mode_processing+0x868>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
		}
		break;
 8000856:	e16a      	b.n	8000b2e <fsm_mode_processing+0x9e2>
	case MODIFY_YELLOW:
		if(timer0_flag==1){
 8000858:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <fsm_mode_processing+0x85c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d157      	bne.n	8000910 <fsm_mode_processing+0x7c4>
			setTimer0(250);
 8000860:	20fa      	movs	r0, #250	; 0xfa
 8000862:	f000 fc7b 	bl	800115c <setTimer0>
			switch (change) {
 8000866:	4b51      	ldr	r3, [pc, #324]	; (80009ac <fsm_mode_processing+0x860>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d852      	bhi.n	8000914 <fsm_mode_processing+0x7c8>
 800086e:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <fsm_mode_processing+0x728>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000885 	.word	0x08000885
 8000878:	0800089d 	.word	0x0800089d
 800087c:	080008b1 	.word	0x080008b1
 8000880:	080008df 	.word	0x080008df
				case 0:
					blinkAllYellowLed();
 8000884:	f000 fb44 	bl	8000f10 <blinkAllYellowLed>
					display7SEG(0,0);
 8000888:	2100      	movs	r1, #0
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fb9a 	bl	8000fc4 <display7SEG>
					change++;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <fsm_mode_processing+0x860>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <fsm_mode_processing+0x860>)
 8000898:	6013      	str	r3, [r2, #0]
					break;
 800089a:	e03c      	b.n	8000916 <fsm_mode_processing+0x7ca>
				case 1:
					display7SEG(1,3);
 800089c:	2103      	movs	r1, #3
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fb90 	bl	8000fc4 <display7SEG>
					change++;
 80008a4:	4b41      	ldr	r3, [pc, #260]	; (80009ac <fsm_mode_processing+0x860>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a40      	ldr	r2, [pc, #256]	; (80009ac <fsm_mode_processing+0x860>)
 80008ac:	6013      	str	r3, [r2, #0]
					break;
 80008ae:	e032      	b.n	8000916 <fsm_mode_processing+0x7ca>
				case 2:
					blinkAllYellowLed();
 80008b0:	f000 fb2e 	bl	8000f10 <blinkAllYellowLed>
					display7SEG(2,(int)((yellowDuration+increase)/10));
 80008b4:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <fsm_mode_processing+0x87c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <fsm_mode_processing+0x868>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	4a3e      	ldr	r2, [pc, #248]	; (80009b8 <fsm_mode_processing+0x86c>)
 80008c0:	fb82 1203 	smull	r1, r2, r2, r3
 80008c4:	1092      	asrs	r2, r2, #2
 80008c6:	17db      	asrs	r3, r3, #31
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	4619      	mov	r1, r3
 80008cc:	2002      	movs	r0, #2
 80008ce:	f000 fb79 	bl	8000fc4 <display7SEG>
					change++;
 80008d2:	4b36      	ldr	r3, [pc, #216]	; (80009ac <fsm_mode_processing+0x860>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a34      	ldr	r2, [pc, #208]	; (80009ac <fsm_mode_processing+0x860>)
 80008da:	6013      	str	r3, [r2, #0]
					break;
 80008dc:	e01b      	b.n	8000916 <fsm_mode_processing+0x7ca>
				case 3:
					display7SEG(3,(yellowDuration+increase)%10);
 80008de:	4b3a      	ldr	r3, [pc, #232]	; (80009c8 <fsm_mode_processing+0x87c>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <fsm_mode_processing+0x868>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	441a      	add	r2, r3
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <fsm_mode_processing+0x86c>)
 80008ea:	fb83 1302 	smull	r1, r3, r3, r2
 80008ee:	1099      	asrs	r1, r3, #2
 80008f0:	17d3      	asrs	r3, r2, #31
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	460b      	mov	r3, r1
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	1ad1      	subs	r1, r2, r3
 80008fe:	460b      	mov	r3, r1
 8000900:	4619      	mov	r1, r3
 8000902:	2003      	movs	r0, #3
 8000904:	f000 fb5e 	bl	8000fc4 <display7SEG>
					change=0;
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <fsm_mode_processing+0x860>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
					break;
 800090e:	e002      	b.n	8000916 <fsm_mode_processing+0x7ca>
				default:
					break;
			}
		}
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <fsm_mode_processing+0x7ca>
					break;
 8000914:	bf00      	nop
		if(is_button_pressed(0)&&timer1_flag){
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f9a2 	bl	8000c60 <is_button_pressed>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00f      	beq.n	8000942 <fsm_mode_processing+0x7f6>
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <fsm_mode_processing+0x870>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00b      	beq.n	8000942 <fsm_mode_processing+0x7f6>
			mode=MODIFY_GREEN;
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <fsm_mode_processing+0x874>)
 800092c:	2206      	movs	r2, #6
 800092e:	701a      	strb	r2, [r3, #0]
			increase=0;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <fsm_mode_processing+0x868>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
			setTimer1(200);
 8000936:	20c8      	movs	r0, #200	; 0xc8
 8000938:	f000 fc44 	bl	80011c4 <setTimer1>
			timer0_flag=1;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <fsm_mode_processing+0x85c>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1)&&timer2_flag){
 8000942:	2001      	movs	r0, #1
 8000944:	f000 f98c 	bl	8000c60 <is_button_pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d012      	beq.n	8000974 <fsm_mode_processing+0x828>
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <fsm_mode_processing+0x878>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00e      	beq.n	8000974 <fsm_mode_processing+0x828>
			setTimer2(200);
 8000956:	20c8      	movs	r0, #200	; 0xc8
 8000958:	f000 fc68 	bl	800122c <setTimer2>
			if((increase+yellowDuration)<99) increase++;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <fsm_mode_processing+0x868>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <fsm_mode_processing+0x87c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4413      	add	r3, r2
 8000966:	2b62      	cmp	r3, #98	; 0x62
 8000968:	dc04      	bgt.n	8000974 <fsm_mode_processing+0x828>
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <fsm_mode_processing+0x868>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <fsm_mode_processing+0x868>)
 8000972:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(2)&&timer2_flag){
 8000974:	2002      	movs	r0, #2
 8000976:	f000 f973 	bl	8000c60 <is_button_pressed>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 80d8 	beq.w	8000b32 <fsm_mode_processing+0x9e6>
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <fsm_mode_processing+0x878>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 80d3 	beq.w	8000b32 <fsm_mode_processing+0x9e6>
			setTimer2(200);
 800098c:	20c8      	movs	r0, #200	; 0xc8
 800098e:	f000 fc4d 	bl	800122c <setTimer2>
			yellowDuration+=increase;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <fsm_mode_processing+0x87c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <fsm_mode_processing+0x868>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <fsm_mode_processing+0x87c>)
 800099e:	6013      	str	r3, [r2, #0]
			increase=0;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <fsm_mode_processing+0x868>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		}
		break;
 80009a6:	e0c4      	b.n	8000b32 <fsm_mode_processing+0x9e6>
 80009a8:	2000006c 	.word	0x2000006c
 80009ac:	20000050 	.word	0x20000050
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000054 	.word	0x20000054
 80009b8:	66666667 	.word	0x66666667
 80009bc:	20000074 	.word	0x20000074
 80009c0:	20000048 	.word	0x20000048
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	20000008 	.word	0x20000008
	case MODIFY_GREEN:
		if(timer0_flag==1){
 80009cc:	4b5b      	ldr	r3, [pc, #364]	; (8000b3c <fsm_mode_processing+0x9f0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d157      	bne.n	8000a84 <fsm_mode_processing+0x938>
			setTimer0(250);
 80009d4:	20fa      	movs	r0, #250	; 0xfa
 80009d6:	f000 fbc1 	bl	800115c <setTimer0>
			switch (change) {
 80009da:	4b59      	ldr	r3, [pc, #356]	; (8000b40 <fsm_mode_processing+0x9f4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d852      	bhi.n	8000a88 <fsm_mode_processing+0x93c>
 80009e2:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <fsm_mode_processing+0x89c>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	080009f9 	.word	0x080009f9
 80009ec:	08000a11 	.word	0x08000a11
 80009f0:	08000a25 	.word	0x08000a25
 80009f4:	08000a53 	.word	0x08000a53
				case 0:
					blinkAllGreenLed();
 80009f8:	f000 fab8 	bl	8000f6c <blinkAllGreenLed>
					display7SEG(0,0);
 80009fc:	2100      	movs	r1, #0
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fae0 	bl	8000fc4 <display7SEG>
					change++;
 8000a04:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a0c:	6013      	str	r3, [r2, #0]
					break;
 8000a0e:	e03c      	b.n	8000a8a <fsm_mode_processing+0x93e>
				case 1:
					display7SEG(1,4);
 8000a10:	2104      	movs	r1, #4
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fad6 	bl	8000fc4 <display7SEG>
					change++;
 8000a18:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a20:	6013      	str	r3, [r2, #0]
					break;
 8000a22:	e032      	b.n	8000a8a <fsm_mode_processing+0x93e>
				case 2:
					blinkAllGreenLed();
 8000a24:	f000 faa2 	bl	8000f6c <blinkAllGreenLed>
					display7SEG(2,(int)((greenDuration+increase)/10));
 8000a28:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <fsm_mode_processing+0x9f8>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a46      	ldr	r2, [pc, #280]	; (8000b4c <fsm_mode_processing+0xa00>)
 8000a34:	fb82 1203 	smull	r1, r2, r2, r3
 8000a38:	1092      	asrs	r2, r2, #2
 8000a3a:	17db      	asrs	r3, r3, #31
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fabf 	bl	8000fc4 <display7SEG>
					change++;
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a4e:	6013      	str	r3, [r2, #0]
					break;
 8000a50:	e01b      	b.n	8000a8a <fsm_mode_processing+0x93e>
				case 3:
					display7SEG(3,(greenDuration+increase)%10);
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <fsm_mode_processing+0x9f8>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	441a      	add	r2, r3
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <fsm_mode_processing+0xa00>)
 8000a5e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a62:	1099      	asrs	r1, r3, #2
 8000a64:	17d3      	asrs	r3, r2, #31
 8000a66:	1ac9      	subs	r1, r1, r3
 8000a68:	460b      	mov	r3, r1
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	1ad1      	subs	r1, r2, r3
 8000a72:	460b      	mov	r3, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 faa4 	bl	8000fc4 <display7SEG>
					change=0;
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
					break;
 8000a82:	e002      	b.n	8000a8a <fsm_mode_processing+0x93e>
				default:
					break;
			}
		}
 8000a84:	bf00      	nop
 8000a86:	e000      	b.n	8000a8a <fsm_mode_processing+0x93e>
					break;
 8000a88:	bf00      	nop
		if(is_button_pressed(0)&&timer1_flag){
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f8e8 	bl	8000c60 <is_button_pressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d012      	beq.n	8000abc <fsm_mode_processing+0x970>
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <fsm_mode_processing+0xa04>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00e      	beq.n	8000abc <fsm_mode_processing+0x970>
			mode=AUTO_RED_GREEN;
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <fsm_mode_processing+0xa08>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
			setTimer1(200);
 8000aa4:	20c8      	movs	r0, #200	; 0xc8
 8000aa6:	f000 fb8d 	bl	80011c4 <setTimer1>
			timer0_flag=1;
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <fsm_mode_processing+0x9f0>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

			cnt = 0;//set 1 seccond
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <fsm_mode_processing+0xa0c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
			change =0;//set 250 for LED 7SEG
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <fsm_mode_processing+0x9f4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]

		}
		if(is_button_pressed(1)&&timer2_flag){
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 f8cf 	bl	8000c60 <is_button_pressed>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d012      	beq.n	8000aee <fsm_mode_processing+0x9a2>
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <fsm_mode_processing+0xa10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00e      	beq.n	8000aee <fsm_mode_processing+0x9a2>
			setTimer2(200);
 8000ad0:	20c8      	movs	r0, #200	; 0xc8
 8000ad2:	f000 fbab 	bl	800122c <setTimer2>
			if((increase+greenDuration)<99)increase++;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <fsm_mode_processing+0x9f8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	2b62      	cmp	r3, #98	; 0x62
 8000ae2:	dc04      	bgt.n	8000aee <fsm_mode_processing+0x9a2>
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000aec:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(2)&&timer2_flag){
 8000aee:	2002      	movs	r0, #2
 8000af0:	f000 f8b6 	bl	8000c60 <is_button_pressed>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01d      	beq.n	8000b36 <fsm_mode_processing+0x9ea>
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <fsm_mode_processing+0xa10>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d019      	beq.n	8000b36 <fsm_mode_processing+0x9ea>
			setTimer2(200);
 8000b02:	20c8      	movs	r0, #200	; 0xc8
 8000b04:	f000 fb92 	bl	800122c <setTimer2>
			greenDuration+=increase;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <fsm_mode_processing+0x9f8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <fsm_mode_processing+0x9f8>)
 8000b14:	6013      	str	r3, [r2, #0]
			increase=0;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <fsm_mode_processing+0x9fc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b1c:	e00b      	b.n	8000b36 <fsm_mode_processing+0x9ea>
		break;
 8000b1e:	bf00      	nop
 8000b20:	e00a      	b.n	8000b38 <fsm_mode_processing+0x9ec>
		break;
 8000b22:	bf00      	nop
 8000b24:	e008      	b.n	8000b38 <fsm_mode_processing+0x9ec>
		break;
 8000b26:	bf00      	nop
 8000b28:	e006      	b.n	8000b38 <fsm_mode_processing+0x9ec>
		break;
 8000b2a:	bf00      	nop
 8000b2c:	e004      	b.n	8000b38 <fsm_mode_processing+0x9ec>
		break;
 8000b2e:	bf00      	nop
 8000b30:	e002      	b.n	8000b38 <fsm_mode_processing+0x9ec>
		break;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <fsm_mode_processing+0x9ec>
		break;
 8000b36:	bf00      	nop
	}
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000006c 	.word	0x2000006c
 8000b40:	20000050 	.word	0x20000050
 8000b44:	20000004 	.word	0x20000004
 8000b48:	20000054 	.word	0x20000054
 8000b4c:	66666667 	.word	0x66666667
 8000b50:	20000074 	.word	0x20000074
 8000b54:	20000048 	.word	0x20000048
 8000b58:	2000004c 	.word	0x2000004c
 8000b5c:	2000007c 	.word	0x2000007c

08000b60 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void){
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e065      	b.n	8000c38 <button_reading+0xd8>
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000b6c:	79fa      	ldrb	r2, [r7, #7]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4935      	ldr	r1, [pc, #212]	; (8000c48 <button_reading+0xe8>)
 8000b72:	5c89      	ldrb	r1, [r1, r2]
 8000b74:	4a35      	ldr	r2, [pc, #212]	; (8000c4c <button_reading+0xec>)
 8000b76:	54d1      	strb	r1, [r2, r3]
		switch (i) {
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d01c      	beq.n	8000bb8 <button_reading+0x58>
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	dc25      	bgt.n	8000bce <button_reading+0x6e>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <button_reading+0x2c>
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d00b      	beq.n	8000ba2 <button_reading+0x42>
				break;
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
				break;
			default:
				break;
 8000b8a:	e020      	b.n	8000bce <button_reading+0x6e>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000b8c:	79fc      	ldrb	r4, [r7, #7]
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	482f      	ldr	r0, [pc, #188]	; (8000c50 <button_reading+0xf0>)
 8000b94:	f000 ff6a 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <button_reading+0xe8>)
 8000b9e:	551a      	strb	r2, [r3, r4]
				break;
 8000ba0:	e016      	b.n	8000bd0 <button_reading+0x70>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000ba2:	79fc      	ldrb	r4, [r7, #7]
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4829      	ldr	r0, [pc, #164]	; (8000c50 <button_reading+0xf0>)
 8000baa:	f000 ff5f 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <button_reading+0xe8>)
 8000bb4:	551a      	strb	r2, [r3, r4]
				break;
 8000bb6:	e00b      	b.n	8000bd0 <button_reading+0x70>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000bb8:	79fc      	ldrb	r4, [r7, #7]
 8000bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbe:	4824      	ldr	r0, [pc, #144]	; (8000c50 <button_reading+0xf0>)
 8000bc0:	f000 ff54 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <button_reading+0xe8>)
 8000bca:	551a      	strb	r2, [r3, r4]
				break;
 8000bcc:	e000      	b.n	8000bd0 <button_reading+0x70>
				break;
 8000bce:	bf00      	nop
		}

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <button_reading+0xe8>)
 8000bd4:	5cd2      	ldrb	r2, [r2, r3]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	491c      	ldr	r1, [pc, #112]	; (8000c4c <button_reading+0xec>)
 8000bda:	5ccb      	ldrb	r3, [r1, r3]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d105      	bne.n	8000bec <button_reading+0x8c>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4918      	ldr	r1, [pc, #96]	; (8000c48 <button_reading+0xe8>)
 8000be6:	5c89      	ldrb	r1, [r1, r2]
 8000be8:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <button_reading+0xf4>)
 8000bea:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <button_reading+0xf4>)
 8000bf0:	5cd3      	ldrb	r3, [r2, r3]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d114      	bne.n	8000c20 <button_reading+0xc0>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <button_reading+0xf8>)
 8000bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bfe:	2b63      	cmp	r3, #99	; 0x63
 8000c00:	d809      	bhi.n	8000c16 <button_reading+0xb6>
					counterForButtonPress1s[i]++;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <button_reading+0xf8>)
 8000c06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c0a:	3201      	adds	r2, #1
 8000c0c:	b291      	uxth	r1, r2
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <button_reading+0xf8>)
 8000c10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c14:	e00d      	b.n	8000c32 <button_reading+0xd2>

				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <button_reading+0xfc>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	54d1      	strb	r1, [r2, r3]
 8000c1e:	e008      	b.n	8000c32 <button_reading+0xd2>
					//todo
				}
			} else {
				counterForButtonPress1s[i] = 0;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <button_reading+0xf8>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <button_reading+0xfc>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3301      	adds	r3, #1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d996      	bls.n	8000b6c <button_reading+0xc>
			}
	}
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	20000058 	.word	0x20000058
 8000c4c:	2000005c 	.word	0x2000005c
 8000c50:	40010800 	.word	0x40010800
 8000c54:	2000000c 	.word	0x2000000c
 8000c58:	20000064 	.word	0x20000064
 8000c5c:	20000060 	.word	0x20000060

08000c60 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <is_button_pressed+0x14>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e007      	b.n	8000c84 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <is_button_pressed+0x30>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2301      	moveq	r3, #1
 8000c80:	2300      	movne	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000000c 	.word	0x2000000c

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f000 fbfe 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f81c 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 f8a2 	bl	8000de8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ca4:	f000 f854 	bl	8000d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <main+0x34>)
 8000caa:	f001 fb47 	bl	800233c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer0_flag=1;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <main+0x38>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
  timer1_flag=1;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <main+0x3c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
  timer2_flag=1;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <main+0x40>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 fsm_mode_processing();
 8000cc0:	f7ff fa44 	bl	800014c <fsm_mode_processing>
  {
 8000cc4:	e7fc      	b.n	8000cc0 <main+0x2c>
 8000cc6:	bf00      	nop
 8000cc8:	20000094 	.word	0x20000094
 8000ccc:	2000006c 	.word	0x2000006c
 8000cd0:	20000074 	.word	0x20000074
 8000cd4:	2000007c 	.word	0x2000007c

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b090      	sub	sp, #64	; 0x40
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fee0 	bl	8002aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fedc 	bl	8001acc <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d1a:	f000 f8c7 	bl	8000eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 f948 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d42:	f000 f8b3 	bl	8000eac <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3740      	adds	r7, #64	; 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d84:	220a      	movs	r2, #10
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d96:	f001 fa81 	bl	800229c <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da0:	f000 f884 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000db2:	f001 fc17 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 f876 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000dce:	f001 fddf 	bl	8002990 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f868 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000094 	.word	0x20000094

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_GPIO_Init+0xb8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <MX_GPIO_Init+0xb8>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_GPIO_Init+0xb8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0xb8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <MX_GPIO_Init+0xb8>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_GPIO_Init+0xb8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_RED_2_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 8000e32:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e34:	f000 fe31 	bl	8001a9a <HAL_GPIO_WritePin>
                          |LED_YELLOW_1_Pin|LED_YELLOW_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d1_Pin
 8000e38:	2200      	movs	r2, #0
 8000e3a:	217f      	movs	r1, #127	; 0x7f
 8000e3c:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <MX_GPIO_Init+0xc0>)
 8000e3e:	f000 fe2c 	bl	8001a9a <HAL_GPIO_WritePin>
                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_RED_2_Pin LED_GREEN_1_Pin LED_GREEN_2_Pin
                           LED_YELLOW_1_Pin LED_YELLOW_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_RED_2_Pin|LED_GREEN_1_Pin|LED_GREEN_2_Pin
 8000e42:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8000e46:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_1_Pin|LED_YELLOW_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e5c:	f000 fc8c 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d1_Pin
 8000e60:	237f      	movs	r3, #127	; 0x7f
 8000e62:	60bb      	str	r3, [r7, #8]
                          |e1_Pin|f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	4619      	mov	r1, r3
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <MX_GPIO_Init+0xc0>)
 8000e78:	f000 fc7e 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000e7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e92:	f000 fc71 	bl	8001778 <HAL_GPIO_Init>

}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <blinkAllRedLed>:

int ledR=1;
int ledY=1;
int ledG=1;

void blinkAllRedLed(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	if(ledR==1){
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <blinkAllRedLed+0x50>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d105      	bne.n	8000ed0 <blinkAllRedLed+0x18>
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_RED_2_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2118      	movs	r1, #24
 8000ec8:	4810      	ldr	r0, [pc, #64]	; (8000f0c <blinkAllRedLed+0x54>)
 8000eca:	f000 fde6 	bl	8001a9a <HAL_GPIO_WritePin>
 8000ece:	e004      	b.n	8000eda <blinkAllRedLed+0x22>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_RED_2_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2118      	movs	r1, #24
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <blinkAllRedLed+0x54>)
 8000ed6:	f000 fde0 	bl	8001a9a <HAL_GPIO_WritePin>
	}
	ledR=!ledR;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <blinkAllRedLed+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf0c      	ite	eq
 8000ee2:	2301      	moveq	r3, #1
 8000ee4:	2300      	movne	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <blinkAllRedLed+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin|LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <blinkAllRedLed+0x54>)
 8000ef6:	f000 fdd0 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2160      	movs	r1, #96	; 0x60
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <blinkAllRedLed+0x54>)
 8000f00:	f000 fdcb 	bl	8001a9a <HAL_GPIO_WritePin>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	40010800 	.word	0x40010800

08000f10 <blinkAllYellowLed>:
void blinkAllYellowLed(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	if(ledY==1){
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <blinkAllYellowLed+0x54>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d106      	bne.n	8000f2a <blinkAllYellowLed+0x1a>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin|LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000f22:	4811      	ldr	r0, [pc, #68]	; (8000f68 <blinkAllYellowLed+0x58>)
 8000f24:	f000 fdb9 	bl	8001a9a <HAL_GPIO_WritePin>
 8000f28:	e005      	b.n	8000f36 <blinkAllYellowLed+0x26>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin|LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <blinkAllYellowLed+0x58>)
 8000f32:	f000 fdb2 	bl	8001a9a <HAL_GPIO_WritePin>
	}
	ledY=!ledY;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <blinkAllYellowLed+0x54>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <blinkAllYellowLed+0x54>)
 8000f48:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_RED_2_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2118      	movs	r1, #24
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <blinkAllYellowLed+0x58>)
 8000f50:	f000 fda3 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2160      	movs	r1, #96	; 0x60
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <blinkAllYellowLed+0x58>)
 8000f5a:	f000 fd9e 	bl	8001a9a <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000014 	.word	0x20000014
 8000f68:	40010800 	.word	0x40010800

08000f6c <blinkAllGreenLed>:
void blinkAllGreenLed(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if(ledG==1){
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <blinkAllGreenLed+0x50>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d105      	bne.n	8000f84 <blinkAllGreenLed+0x18>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin|LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2160      	movs	r1, #96	; 0x60
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <blinkAllGreenLed+0x54>)
 8000f7e:	f000 fd8c 	bl	8001a9a <HAL_GPIO_WritePin>
 8000f82:	e004      	b.n	8000f8e <blinkAllGreenLed+0x22>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2160      	movs	r1, #96	; 0x60
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <blinkAllGreenLed+0x54>)
 8000f8a:	f000 fd86 	bl	8001a9a <HAL_GPIO_WritePin>
	}
	ledG=!ledG;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <blinkAllGreenLed+0x50>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <blinkAllGreenLed+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_RED_2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2118      	movs	r1, #24
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <blinkAllGreenLed+0x54>)
 8000fa8:	f000 fd77 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin|LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <blinkAllGreenLed+0x54>)
 8000fb4:	f000 fd71 	bl	8001a9a <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <display7SEG>:
void display7SEG(unsigned int led_enable,unsigned int number){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d83f      	bhi.n	8001054 <display7SEG+0x90>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <display7SEG+0x18>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08001007 	.word	0x08001007
 8000fe4:	08001021 	.word	0x08001021
 8000fe8:	0800103b 	.word	0x0800103b
	switch (led_enable) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	4827      	ldr	r0, [pc, #156]	; (8001090 <display7SEG+0xcc>)
 8000ff4:	f000 fd51 	bl	8001a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ffe:	4824      	ldr	r0, [pc, #144]	; (8001090 <display7SEG+0xcc>)
 8001000:	f000 fd4b 	bl	8001a9a <HAL_GPIO_WritePin>
			break;
 8001004:	e027      	b.n	8001056 <display7SEG+0x92>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	4820      	ldr	r0, [pc, #128]	; (8001090 <display7SEG+0xcc>)
 800100e:	f000 fd44 	bl	8001a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <display7SEG+0xcc>)
 800101a:	f000 fd3e 	bl	8001a9a <HAL_GPIO_WritePin>
			break;
 800101e:	e01a      	b.n	8001056 <display7SEG+0x92>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <display7SEG+0xcc>)
 8001028:	f000 fd37 	bl	8001a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN3_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <display7SEG+0xcc>)
 8001034:	f000 fd31 	bl	8001a9a <HAL_GPIO_WritePin>
			break;
 8001038:	e00d      	b.n	8001056 <display7SEG+0x92>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <display7SEG+0xcc>)
 8001042:	f000 fd2a 	bl	8001a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800104c:	4810      	ldr	r0, [pc, #64]	; (8001090 <display7SEG+0xcc>)
 800104e:	f000 fd24 	bl	8001a9a <HAL_GPIO_WritePin>
			break;
 8001052:	e000      	b.n	8001056 <display7SEG+0x92>
		default:
			break;
 8001054:	bf00      	nop
	}
	uint8_t led7SegHex[10]={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <display7SEG+0xd0>)
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	ca07      	ldmia	r2, {r0, r1, r2}
 800105e:	c303      	stmia	r3!, {r0, r1}
 8001060:	801a      	strh	r2, [r3, #0]
	GPIOB->ODR &= 0xff80;
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <display7SEG+0xd4>)
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	490c      	ldr	r1, [pc, #48]	; (8001098 <display7SEG+0xd4>)
 8001068:	f64f 7380 	movw	r3, #65408	; 0xff80
 800106c:	4013      	ands	r3, r2
 800106e:	60cb      	str	r3, [r1, #12]
	GPIOB->ODR|= led7SegHex[number];
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <display7SEG+0xd4>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f107 010c 	add.w	r1, r7, #12
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	440a      	add	r2, r1
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	4611      	mov	r1, r2
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <display7SEG+0xd4>)
 8001082:	430b      	orrs	r3, r1
 8001084:	60d3      	str	r3, [r2, #12]
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40010800 	.word	0x40010800
 8001094:	08002ad4 	.word	0x08002ad4
 8001098:	40010c00 	.word	0x40010c00

0800109c <turnOffAll>:
/*void display7SEGValue(unsigned int number){
	uint8_t led7SegHex[10]={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
	GPIOB->ODR &= 0xc07f;
	GPIOB->ODR|= (led7SegHex[number]<<7);
}*/
void turnOffAll(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2160      	movs	r1, #96	; 0x60
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <turnOffAll+0x28>)
 80010a6:	f000 fcf8 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin|LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <turnOffAll+0x28>)
 80010b2:	f000 fcf2 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_RED_2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2118      	movs	r1, #24
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <turnOffAll+0x28>)
 80010bc:	f000 fced 	bl	8001a9a <HAL_GPIO_WritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40010800 	.word	0x40010800

080010c8 <turnOnOnlyRed>:
void turnOnOnlyRed(int road){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if(road==0){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d105      	bne.n	80010e2 <turnOnOnlyRed+0x1a>
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2108      	movs	r1, #8
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <turnOnOnlyRed+0x2c>)
 80010dc:	f000 fcdd 	bl	8001a9a <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, GPIO_PIN_SET);
	}
}
 80010e0:	e004      	b.n	80010ec <turnOnOnlyRed+0x24>
		HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2110      	movs	r1, #16
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <turnOnOnlyRed+0x2c>)
 80010e8:	f000 fcd7 	bl	8001a9a <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010800 	.word	0x40010800

080010f8 <turnOnOnlyYellow>:
void turnOnOnlyYellow(int road){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	if(road==0){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <turnOnOnlyYellow+0x1a>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <turnOnOnlyYellow+0x30>)
 800110c:	f000 fcc5 	bl	8001a9a <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, GPIO_PIN_SET);
	}
}
 8001110:	e005      	b.n	800111e <turnOnOnlyYellow+0x26>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <turnOnOnlyYellow+0x30>)
 800111a:	f000 fcbe 	bl	8001a9a <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40010800 	.word	0x40010800

0800112c <turnOnOnlyGreen>:
void turnOnOnlyGreen(int road){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if(road==0){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <turnOnOnlyGreen+0x1a>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2120      	movs	r1, #32
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <turnOnOnlyGreen+0x2c>)
 8001140:	f000 fcab 	bl	8001a9a <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, GPIO_PIN_SET);
	}
}
 8001144:	e004      	b.n	8001150 <turnOnOnlyGreen+0x24>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <turnOnOnlyGreen+0x2c>)
 800114c:	f000 fca5 	bl	8001a9a <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010800 	.word	0x40010800

0800115c <setTimer0>:
int timer0_flag=0;
int timer0_counter=0;

int TICK=10;

void setTimer0(int duration){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	timer0_counter=duration/TICK;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <setTimer0+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	fb92 f3f3 	sdiv	r3, r2, r3
 800116e:	4a06      	ldr	r2, [pc, #24]	; (8001188 <setTimer0+0x2c>)
 8001170:	6013      	str	r3, [r2, #0]
	timer0_flag=0;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <setTimer0+0x30>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2000001c 	.word	0x2000001c
 8001188:	20000070 	.word	0x20000070
 800118c:	2000006c 	.word	0x2000006c

08001190 <runTimer0>:
void runTimer0(){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	if(timer0_counter>0){
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <runTimer0+0x2c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd0b      	ble.n	80011b4 <runTimer0+0x24>
		timer0_counter--;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <runTimer0+0x2c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <runTimer0+0x2c>)
 80011a4:	6013      	str	r3, [r2, #0]
		if(timer0_counter==0) timer0_flag=1;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <runTimer0+0x2c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <runTimer0+0x24>
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <runTimer0+0x30>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
	}
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000070 	.word	0x20000070
 80011c0:	2000006c 	.word	0x2000006c

080011c4 <setTimer1>:


int timer1_flag=0;
int timer1_counter=0;

void setTimer1(int duration){
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <setTimer1+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <setTimer1+0x2c>)
 80011d8:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <setTimer1+0x30>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000001c 	.word	0x2000001c
 80011f0:	20000078 	.word	0x20000078
 80011f4:	20000074 	.word	0x20000074

080011f8 <runTimer1>:
void runTimer1(){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <runTimer1+0x2c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	dd0b      	ble.n	800121c <runTimer1+0x24>
		timer1_counter--;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <runTimer1+0x2c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a06      	ldr	r2, [pc, #24]	; (8001224 <runTimer1+0x2c>)
 800120c:	6013      	str	r3, [r2, #0]
		if(timer1_counter==0) timer1_flag=1;
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <runTimer1+0x2c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <runTimer1+0x24>
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <runTimer1+0x30>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]
	}
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000078 	.word	0x20000078
 8001228:	20000074 	.word	0x20000074

0800122c <setTimer2>:

int timer2_flag=0;
int timer2_counter=0;

void setTimer2(int duration){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/TICK;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <setTimer2+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	fb92 f3f3 	sdiv	r3, r2, r3
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <setTimer2+0x2c>)
 8001240:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <setTimer2+0x30>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000001c 	.word	0x2000001c
 8001258:	20000080 	.word	0x20000080
 800125c:	2000007c 	.word	0x2000007c

08001260 <runTimer2>:
void runTimer2(){
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	if(timer2_counter>0){
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <runTimer2+0x2c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd0b      	ble.n	8001284 <runTimer2+0x24>
		timer2_counter--;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <runTimer2+0x2c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <runTimer2+0x2c>)
 8001274:	6013      	str	r3, [r2, #0]
		if(timer2_counter==0) timer2_flag=1;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <runTimer2+0x2c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <runTimer2+0x24>
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <runTimer2+0x30>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
	}
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000080 	.word	0x20000080
 8001290:	2000007c 	.word	0x2000007c

08001294 <runTimer3>:

void setTimer3(int duration){
	timer3_counter=duration/TICK;
	timer3_flag=0;
}
void runTimer3(){
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	if(timer3_counter>0){
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <runTimer3+0x2c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd0b      	ble.n	80012b8 <runTimer3+0x24>
		timer3_counter--;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <runTimer3+0x2c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <runTimer3+0x2c>)
 80012a8:	6013      	str	r3, [r2, #0]
		if(timer3_counter==0) timer3_flag=1;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <runTimer3+0x2c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <runTimer3+0x24>
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <runTimer3+0x30>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
	}
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000088 	.word	0x20000088
 80012c4:	20000084 	.word	0x20000084

080012c8 <runTimer4>:

void setTimer4(int duration){
	timer4_counter=duration/TICK;
	timer4_flag=0;
}
void runTimer4(){
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	if(timer4_counter>0){
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <runTimer4+0x2c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dd0b      	ble.n	80012ec <runTimer4+0x24>
		timer4_counter--;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <runTimer4+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <runTimer4+0x2c>)
 80012dc:	6013      	str	r3, [r2, #0]
		if(timer4_counter==0) timer4_flag=1;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <runTimer4+0x2c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <runTimer4+0x24>
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <runTimer4+0x30>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
	}
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000090 	.word	0x20000090
 80012f8:	2000008c 	.word	0x2000008c

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_MspInit+0x5c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_MspInit+0x5c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_MspInit+0x5c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x5c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_MspInit+0x5c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_MspInit+0x5c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_MspInit+0x60>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_MspInit+0x60>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000

08001360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001370:	d113      	bne.n	800139a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_TIM_Base_MspInit+0x44>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_TIM_Base_MspInit+0x44>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_TIM_Base_MspInit+0x44>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	201c      	movs	r0, #28
 8001390:	f000 f9bb 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001394:	201c      	movs	r0, #28
 8001396:	f000 f9d4 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ee:	f000 f899 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <TIM2_IRQHandler+0x10>)
 80013fe:	f000 ffe9 	bl	80023d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000094 	.word	0x20000094

0800140c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "software_timer.h"
#include "input_reading.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d10b      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x2a>
		button_reading();
 800142a:	f7ff fb99 	bl	8000b60 <button_reading>
		runTimer0();
 800142e:	f7ff feaf 	bl	8001190 <runTimer0>
		runTimer1();
 8001432:	f7ff fee1 	bl	80011f8 <runTimer1>
		runTimer2();
 8001436:	f7ff ff13 	bl	8001260 <runTimer2>
		runTimer3();
 800143a:	f7ff ff2b 	bl	8001294 <runTimer3>
		runTimer4();
 800143e:	f7ff ff43 	bl	80012c8 <runTimer4>
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	; (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	; (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001472:	f7ff ffcb 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f001 faf5 	bl	8002a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147a:	f7ff fc0b 	bl	8000c94 <main>
  bx lr
 800147e:	4770      	bx	lr
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001488:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 800148c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001490:	200000e0 	.word	0x200000e0

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f923 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff ff22 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f93b 	bl	800175e <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f903 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000020 	.word	0x20000020
 800151c:	20000028 	.word	0x20000028
 8001520:	20000024 	.word	0x20000024

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x1c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x20>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000028 	.word	0x20000028
 8001544:	200000dc 	.word	0x200000dc

08001548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_GetTick+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	200000dc 	.word	0x200000dc

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4906      	ldr	r1, [pc, #24]	; (80015f4 <__NVIC_EnableIRQ+0x34>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff90 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff2d 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff42 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff90 	bl	800164c <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5f 	bl	80015f8 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff35 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e148      	b.n	8001a1e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800178c:	2201      	movs	r2, #1
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8137 	bne.w	8001a18 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4aa3      	ldr	r2, [pc, #652]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017b4:	4aa1      	ldr	r2, [pc, #644]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d875      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ba:	4aa1      	ldr	r2, [pc, #644]	; (8001a40 <HAL_GPIO_Init+0x2c8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d058      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017c0:	4a9f      	ldr	r2, [pc, #636]	; (8001a40 <HAL_GPIO_Init+0x2c8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d86f      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017c6:	4a9f      	ldr	r2, [pc, #636]	; (8001a44 <HAL_GPIO_Init+0x2cc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d052      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017cc:	4a9d      	ldr	r2, [pc, #628]	; (8001a44 <HAL_GPIO_Init+0x2cc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d869      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017d2:	4a9d      	ldr	r2, [pc, #628]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04c      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017d8:	4a9b      	ldr	r2, [pc, #620]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d863      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017de:	4a9b      	ldr	r2, [pc, #620]	; (8001a4c <HAL_GPIO_Init+0x2d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d046      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017e4:	4a99      	ldr	r2, [pc, #612]	; (8001a4c <HAL_GPIO_Init+0x2d4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d85d      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d82a      	bhi.n	8001844 <HAL_GPIO_Init+0xcc>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d859      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_GPIO_Init+0x80>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001873 	.word	0x08001873
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800185f 	.word	0x0800185f
 8001804:	080018a1 	.word	0x080018a1
 8001808:	080018a7 	.word	0x080018a7
 800180c:	080018a7 	.word	0x080018a7
 8001810:	080018a7 	.word	0x080018a7
 8001814:	080018a7 	.word	0x080018a7
 8001818:	080018a7 	.word	0x080018a7
 800181c:	080018a7 	.word	0x080018a7
 8001820:	080018a7 	.word	0x080018a7
 8001824:	080018a7 	.word	0x080018a7
 8001828:	080018a7 	.word	0x080018a7
 800182c:	080018a7 	.word	0x080018a7
 8001830:	080018a7 	.word	0x080018a7
 8001834:	080018a7 	.word	0x080018a7
 8001838:	080018a7 	.word	0x080018a7
 800183c:	08001855 	.word	0x08001855
 8001840:	08001869 	.word	0x08001869
 8001844:	4a82      	ldr	r2, [pc, #520]	; (8001a50 <HAL_GPIO_Init+0x2d8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184a:	e02c      	b.n	80018a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e029      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	3304      	adds	r3, #4
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e024      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	3308      	adds	r3, #8
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e01f      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	330c      	adds	r3, #12
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e01a      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187a:	2304      	movs	r3, #4
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e013      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	611a      	str	r2, [r3, #16]
          break;
 8001892:	e009      	b.n	80018a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001894:	2308      	movs	r3, #8
 8001896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	615a      	str	r2, [r3, #20]
          break;
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          break;
 80018a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	; 0xff
 80018ac:	d801      	bhi.n	80018b2 <HAL_GPIO_Init+0x13a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_Init+0x13e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d802      	bhi.n	80018c4 <HAL_GPIO_Init+0x14c>
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x152>
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	3b08      	subs	r3, #8
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	210f      	movs	r1, #15
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	6a39      	ldr	r1, [r7, #32]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8090 	beq.w	8001a18 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_GPIO_Init+0x2dc>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_GPIO_Init+0x2dc>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_GPIO_Init+0x2dc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001910:	4a51      	ldr	r2, [pc, #324]	; (8001a58 <HAL_GPIO_Init+0x2e0>)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a49      	ldr	r2, [pc, #292]	; (8001a5c <HAL_GPIO_Init+0x2e4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1e0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <HAL_GPIO_Init+0x2e8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1dc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1d8>
 800194c:	2302      	movs	r3, #2
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x1e2>
 8001950:	2303      	movs	r3, #3
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x1e2>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x1e2>
 8001958:	2300      	movs	r3, #0
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196a:	493b      	ldr	r1, [pc, #236]	; (8001a58 <HAL_GPIO_Init+0x2e0>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4933      	ldr	r1, [pc, #204]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 800199c:	4013      	ands	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	492d      	ldr	r1, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4929      	ldr	r1, [pc, #164]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4923      	ldr	r1, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	491f      	ldr	r1, [pc, #124]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	4919      	ldr	r1, [pc, #100]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4915      	ldr	r1, [pc, #84]	; (8001a68 <HAL_GPIO_Init+0x2f0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f aeaf 	bne.w	800178c <HAL_GPIO_Init+0x14>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	372c      	adds	r7, #44	; 0x2c
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	10320000 	.word	0x10320000
 8001a40:	10310000 	.word	0x10310000
 8001a44:	10220000 	.word	0x10220000
 8001a48:	10210000 	.word	0x10210000
 8001a4c:	10120000 	.word	0x10120000
 8001a50:	10110000 	.word	0x10110000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40010800 	.word	0x40010800
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40011000 	.word	0x40011000
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e001      	b.n	8001a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aaa:	787b      	ldrb	r3, [r7, #1]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	041a      	lsls	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e26c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8087 	beq.w	8001bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aec:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d00c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af8:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d112      	bne.n	8001b2a <HAL_RCC_OscConfig+0x5e>
 8001b04:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d06c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x12c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d168      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e246      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x76>
 8001b34:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a7f      	ldr	r2, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e02e      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x98>
 8001b4a:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7a      	ldr	r2, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b78      	ldr	r3, [pc, #480]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a77      	ldr	r2, [pc, #476]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd4>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0xbc>
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a71      	ldr	r2, [pc, #452]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6e      	ldr	r2, [pc, #440]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd4>
 8001b88:	4b6b      	ldr	r3, [pc, #428]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6a      	ldr	r2, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a67      	ldr	r2, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fcce 	bl	8001548 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fcca 	bl	8001548 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1fa      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe4>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fcba 	bl	8001548 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fcb6 	bl	8001548 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1e6      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x10c>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d063      	beq.n	8001cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c06:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c12:	4b49      	ldr	r3, [pc, #292]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x18c>
 8001c1e:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x176>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e1ba      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4939      	ldr	r1, [pc, #228]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	e03a      	b.n	8001cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_RCC_OscConfig+0x270>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fc6f 	bl	8001548 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fc6b 	bl	8001548 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e19b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCC_OscConfig+0x270>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc4e 	bl	8001548 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fc4a 	bl	8001548 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e17a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d03a      	beq.n	8001d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d019      	beq.n	8001d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fc2e 	bl	8001548 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fc2a 	bl	8001548 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e15a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f000 faa6 	bl	8002260 <RCC_Delay>
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_RCC_OscConfig+0x274>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fc14 	bl	8001548 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d22:	e00f      	b.n	8001d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fc10 	bl	8001548 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d908      	bls.n	8001d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e140      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	42420000 	.word	0x42420000
 8001d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	4b9e      	ldr	r3, [pc, #632]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e9      	bne.n	8001d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a6 	beq.w	8001eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d62:	4b97      	ldr	r3, [pc, #604]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a93      	ldr	r2, [pc, #588]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b8e      	ldr	r3, [pc, #568]	; (8001fc4 <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d118      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fbd1 	bl	8001548 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001daa:	f7ff fbcd 	bl	8001548 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b64      	cmp	r3, #100	; 0x64
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0fd      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x312>
 8001dd0:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a7a      	ldr	r2, [pc, #488]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	e02d      	b.n	8001e3a <HAL_RCC_OscConfig+0x36e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x334>
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a75      	ldr	r2, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a72      	ldr	r2, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	e01c      	b.n	8001e3a <HAL_RCC_OscConfig+0x36e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d10c      	bne.n	8001e22 <HAL_RCC_OscConfig+0x356>
 8001e08:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a6c      	ldr	r2, [pc, #432]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a69      	ldr	r2, [pc, #420]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	e00b      	b.n	8001e3a <HAL_RCC_OscConfig+0x36e>
 8001e22:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a66      	ldr	r2, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a63      	ldr	r2, [pc, #396]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d015      	beq.n	8001e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fb81 	bl	8001548 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7ff fb7d 	bl	8001548 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0ab      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ee      	beq.n	8001e4a <HAL_RCC_OscConfig+0x37e>
 8001e6c:	e014      	b.n	8001e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb6b 	bl	8001548 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff fb67 	bl	8001548 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e095      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a47      	ldr	r2, [pc, #284]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8081 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d061      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d146      	bne.n	8001f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_OscConfig+0x4fc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fb3b 	bl	8001548 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fb37 	bl	8001548 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e067      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efe:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	492d      	ldr	r1, [pc, #180]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a19      	ldr	r1, [r3, #32]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	430b      	orrs	r3, r1
 8001f22:	4927      	ldr	r1, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x4fc>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb0b 	bl	8001548 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb07 	bl	8001548 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e037      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x46a>
 8001f54:	e02f      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_RCC_OscConfig+0x4fc>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff faf4 	bl	8001548 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff faf0 	bl	8001548 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e020      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x498>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e013      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	42420060 	.word	0x42420060

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0d0      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4965      	ldr	r1, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800204a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d040      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e073      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4936      	ldr	r1, [pc, #216]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7ff fa44 	bl	8001548 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff fa40 	bl	8001548 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e053      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d210      	bcs.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4922      	ldr	r1, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1cc>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1d0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f9a2 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	08002af0 	.word	0x08002af0
 8002198:	20000020 	.word	0x20000020
 800219c:	20000024 	.word	0x20000024

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b490      	push	{r4, r7}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a8:	1d3c      	adds	r4, r7, #4
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021b0:	f240 2301 	movw	r3, #513	; 0x201
 80021b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x46>
 80021de:	e02d      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e2:	623b      	str	r3, [r7, #32]
      break;
 80021e4:	e02d      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021f2:	4413      	add	r3, r2
 80021f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0c5b      	lsrs	r3, r3, #17
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002212:	4413      	add	r3, r2
 8002214:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002218:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221e:	fb02 f203 	mul.w	r2, r2, r3
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	e004      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	623b      	str	r3, [r7, #32]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223e:	623b      	str	r3, [r7, #32]
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	6a3b      	ldr	r3, [r7, #32]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bc90      	pop	{r4, r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	08002ae0 	.word	0x08002ae0
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	003d0900 	.word	0x003d0900

08002260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <RCC_Delay+0x34>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <RCC_Delay+0x38>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a5b      	lsrs	r3, r3, #9
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800227c:	bf00      	nop
  }
  while (Delay --);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <RCC_Delay+0x1c>
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000020 	.word	0x20000020
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e041      	b.n	8002332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff f84c 	bl	8001360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fa6a 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e035      	b.n	80023c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIM_Base_Start_IT+0x90>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_TIM_Base_Start_IT+0x4e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d004      	beq.n	800238a <HAL_TIM_Base_Start_IT+0x4e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d010      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	e007      	b.n	80023be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400

080023d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9b1 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f9a4 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f9b3 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0204 	mvn.w	r2, #4
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f987 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f97a 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f989 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b08      	cmp	r3, #8
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0208 	mvn.w	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f95d 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f950 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f95f 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0210 	mvn.w	r2, #16
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2208      	movs	r2, #8
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f933 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f926 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f935 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0201 	mvn.w	r2, #1
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe ff60 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa67 	bl	8002a52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8f9 	bl	80027a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0220 	mvn.w	r2, #32
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa32 	bl	8002a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x18>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0b3      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x180>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002622:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002634:	d03e      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	f200 8087 	bhi.w	800274c <HAL_TIM_ConfigClockSource+0x168>
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	f000 8085 	beq.w	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	d87f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d01a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0xa2>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d87b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 8002654:	2b60      	cmp	r3, #96	; 0x60
 8002656:	d050      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0x116>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d877      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 800265c:	2b50      	cmp	r3, #80	; 0x50
 800265e:	d03c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xf6>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d873      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d058      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x136>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d86f      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b30      	cmp	r3, #48	; 0x30
 800266e:	d064      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x156>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d86b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b20      	cmp	r3, #32
 8002676:	d060      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x156>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d867      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x156>
 8002680:	2b10      	cmp	r3, #16
 8002682:	d05a      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002684:	e062      	b.n	800274c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f000 f95c 	bl	8002952 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	609a      	str	r2, [r3, #8]
      break;
 80026b2:	e04e      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f000 f945 	bl	8002952 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e03b      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f000 f8bc 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2150      	movs	r1, #80	; 0x50
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f913 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80026f8:	e02b      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f000 f8da 	bl	80028c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2160      	movs	r1, #96	; 0x60
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f903 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 8002718:	e01b      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 f89c 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2140      	movs	r1, #64	; 0x40
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f8f3 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 8002738:	e00b      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 f8ea 	bl	800291e <TIM_ITRx_SetConfig>
        break;
 800274a:	e002      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002750:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <TIM_Base_SetConfig+0xa8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x28>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x28>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a22      	ldr	r2, [pc, #136]	; (8002860 <TIM_Base_SetConfig+0xac>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <TIM_Base_SetConfig+0xa8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <TIM_Base_SetConfig+0x52>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d003      	beq.n	8002806 <TIM_Base_SetConfig+0x52>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a17      	ldr	r2, [pc, #92]	; (8002860 <TIM_Base_SetConfig+0xac>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <TIM_Base_SetConfig+0xa8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	615a      	str	r2, [r3, #20]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400

08002864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 030a 	bic.w	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0210 	bic.w	r2, r3, #16
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	f043 0307 	orr.w	r3, r3, #7
 8002940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e041      	b.n	8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d004      	beq.n	8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10c      	bne.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400

08002a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <__libc_init_array>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	2600      	movs	r6, #0
 8002a68:	4d0c      	ldr	r5, [pc, #48]	; (8002a9c <__libc_init_array+0x38>)
 8002a6a:	4c0d      	ldr	r4, [pc, #52]	; (8002aa0 <__libc_init_array+0x3c>)
 8002a6c:	1b64      	subs	r4, r4, r5
 8002a6e:	10a4      	asrs	r4, r4, #2
 8002a70:	42a6      	cmp	r6, r4
 8002a72:	d109      	bne.n	8002a88 <__libc_init_array+0x24>
 8002a74:	f000 f822 	bl	8002abc <_init>
 8002a78:	2600      	movs	r6, #0
 8002a7a:	4d0a      	ldr	r5, [pc, #40]	; (8002aa4 <__libc_init_array+0x40>)
 8002a7c:	4c0a      	ldr	r4, [pc, #40]	; (8002aa8 <__libc_init_array+0x44>)
 8002a7e:	1b64      	subs	r4, r4, r5
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	42a6      	cmp	r6, r4
 8002a84:	d105      	bne.n	8002a92 <__libc_init_array+0x2e>
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8c:	4798      	blx	r3
 8002a8e:	3601      	adds	r6, #1
 8002a90:	e7ee      	b.n	8002a70 <__libc_init_array+0xc>
 8002a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a96:	4798      	blx	r3
 8002a98:	3601      	adds	r6, #1
 8002a9a:	e7f2      	b.n	8002a82 <__libc_init_array+0x1e>
 8002a9c:	08002b00 	.word	0x08002b00
 8002aa0:	08002b00 	.word	0x08002b00
 8002aa4:	08002b00 	.word	0x08002b00
 8002aa8:	08002b04 	.word	0x08002b04

08002aac <memset>:
 8002aac:	4603      	mov	r3, r0
 8002aae:	4402      	add	r2, r0
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <memset+0xa>
 8002ab4:	4770      	bx	lr
 8002ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aba:	e7f9      	b.n	8002ab0 <memset+0x4>

08002abc <_init>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	bf00      	nop
 8002ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac2:	bc08      	pop	{r3}
 8002ac4:	469e      	mov	lr, r3
 8002ac6:	4770      	bx	lr

08002ac8 <_fini>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr
